#!/usr/bin/env bash

# source utility functions
# shellcheck source=SCRIPTDIR/utils
source "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/utils"

#####################################################
###   COMMON TASK COMMANDS - ALPHABETICAL ORDER   ###
#####################################################

# These functions are intended to be utilized as task commands invoked from the run_make_task script
# All tasks are generic between projects and should be reusable

clean_project_dir() {
    local TEST_IMAGE_NAME="${1:?'required parameter'}"
    local VENV="${2:?'required parameter'}"

    print_colorized ERROR "deleting virtualenv, cache, build and testing temp data"
    continue_prompt

    rm -rf "${VENV}" \
        ./*.egg-info \
        dist \
        build \
        .tox
    find . \( -type f -name "*.py[co]" -o -type d -name "__pycache__" \) -delete

    print_colorized ERROR "deleting image -- ${TEST_IMAGE_NAME}"
    continue_prompt

    docker rmi "${TEST_IMAGE_NAME}"
}

install() {
    local GIT_REPO="${1:?'required parameter'}"
    local PYTHON="${2:?'required parameter'}"
    local VENV="${3:?'required parameter'}"

    print_colorized WARN "installing ${GIT_REPO} to ${VENV}"
    activate_venv "${VENV}"
    "${PYTHON}" setup.py install
}

install_dev() {
    local GIT_REPO="${1:?'required parameter'}"
    local PYTHON="${2:?'required parameter'}"
    local VENV="${3:?'required parameter'}"

    print_colorized WARN "installing ${GIT_REPO} in editable mode to ${VENV}"
    activate_venv "${VENV}"
    "${PYTHON}" -m pip install --editable .
}

install_cluster_deps() {
    local VENV="${1:?'required parameter'}"

    local arch
    local kind_version="v0.7.0"
    local kubectl_version="v1.15.0"
    local helm_version="v3.1.1"

    arch="$(uname | tr '[:upper:]' '[:lower:]')"

    activate_venv "${VENV}"

    if [[ ! -x "${VENV}/bin/kind" ]]; then
        print_colorized WARN "installing kind"
        curl -qsSLo "${VENV}/bin/kind" "https://github.com/kubernetes-sigs/kind/releases/download/${kind_version}/kind-${arch}-amd64"
        chmod +x "${VENV}/bin/kind"
    fi
    if [[ ! -x "${VENV}/bin/helm" ]]; then
        print_colorized WARN "installing helm"
        curl -sSL "https://get.helm.sh/helm-${helm_version}-${arch}-amd64.tar.gz" | tar xzf - -C "${VENV}/bin" --strip-components=1 "${arch}-amd64/helm"
        chmod +x "${VENV}/bin/helm"
    fi
    if [[ ! -x "${VENV}/bin/kubectl" ]]; then
        print_colorized WARN "installing kubectl"
        curl -sSLo "${VENV}/bin/kubectl" "https://storage.googleapis.com/kubernetes-release/release/${kubectl_version}/bin/${arch}/amd64/kubectl"
        chmod +x "${VENV}/bin/kubectl"
    fi
}

kind_cluster_down() {
    local VENV="${1:?'required parameter'}"

    activate_venv "${VENV}"
    kind delete cluster --name e2e-testing
}

kind_cluster_up() {
    local VENV="${1:?'required parameter'}"

    local kind_node_image_tag="v1.15.7@sha256:e2df133f80ef633c53c0200114fce2ed5e1f6947477dbc83261a6a921169488d"

    activate_venv "${VENV}"
    # if a kind cluster named e2e-testing is running export config, otherwise create a new cluster
    if kind get clusters | grep e2e-testing; then
        kind export kubeconfig --name e2e-testing
    else
        kind create cluster --name e2e-testing --config tests/e2e/kind-config.yaml --image "kindest/node:${kind_node_image_tag}" --wait 60s
    fi
}

setup_venv() {
    local VENV="${1:?'required parameter'}"

    hash python3 || (print_colorized ERROR "ensure python3 is installed before attempting to setup virtualenv" && exit 1)

    print_colorized WARN "creating virtualenv ${VENV}"
    python3 -m venv "${VENV}"
    print_colorized WARN "to enable virtual environment run: source ${VENV}/bin/activate"
}